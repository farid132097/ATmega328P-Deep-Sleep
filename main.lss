
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800100  00800100  000002c8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000103  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000288  00000000  00000000  000003eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011f  00000000  00000000  00000673  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e0  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a8  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000097  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000d33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_6>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 14 01 	call	0x228	; 0x228 <main>
  88:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__WDT_sleep_init>:
volatile uint8_t  __init_status=0;
volatile uint8_t  __prr,__ddrb,__ddrc,__ddrd;
volatile uint8_t  __portb,__portc,__portd;

void __WDT_sleep_init(void){
cli();
  90:	f8 94       	cli
WDTCSR=(1<<WDCE)|(1<<WDE);
  92:	e0 e6       	ldi	r30, 0x60	; 96
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	80 83       	st	Z, r24
WDTCSR=(1<<WDP0)|(1<<WDP2)|(1<<WDIE);
  9a:	85 e4       	ldi	r24, 0x45	; 69
  9c:	80 83       	st	Z, r24
sei();
  9e:	78 94       	sei
set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	81 7f       	andi	r24, 0xF1	; 241
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	83 bf       	out	0x33, r24	; 51
__wdt_ticks=0;
  a8:	10 92 00 01 	sts	0x0100, r1
  ac:	10 92 01 01 	sts	0x0101, r1
  b0:	10 92 02 01 	sts	0x0102, r1
  b4:	10 92 03 01 	sts	0x0103, r1
}
  b8:	08 95       	ret

000000ba <turn_off_peripherals>:

void turn_off_peripherals(void){
ADCSRA &=~(1<<ADEN);
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	80 83       	st	Z, r24
ACSR   |= (1<<ACD);
  c4:	80 b7       	in	r24, 0x30	; 48
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 bf       	out	0x30, r24	; 48
__prr   = PRR;
  ca:	e4 e6       	ldi	r30, 0x64	; 100
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 93 07 01 	sts	0x0107, r24
__ddrb  = DDRB;
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	80 93 0b 01 	sts	0x010B, r24
__ddrc  = DDRC;
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	80 93 08 01 	sts	0x0108, r24
__ddrd  = DDRD;
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	80 93 06 01 	sts	0x0106, r24
__portb = PORTB;
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	80 93 09 01 	sts	0x0109, r24
__portc = PORTC;
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	80 93 05 01 	sts	0x0105, r24
__portd = PORTD;
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	80 93 0a 01 	sts	0x010A, r24
PRR     = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24
DDRB    = 0xFF;
  fc:	84 b9       	out	0x04, r24	; 4
PORTB   = 0x00;
  fe:	15 b8       	out	0x05, r1	; 5
DDRC    = 0xFF;
 100:	87 b9       	out	0x07, r24	; 7
PORTC   = 0x00;
 102:	18 b8       	out	0x08, r1	; 8
DDRD    = 0xFF;
 104:	8a b9       	out	0x0a, r24	; 10
PORTD   = 0x00;
 106:	1b b8       	out	0x0b, r1	; 11
}
 108:	08 95       	ret

0000010a <peripherals_prev_state>:

void peripherals_prev_state(void){
PRR  =__prr;
 10a:	80 91 07 01 	lds	r24, 0x0107
 10e:	80 93 64 00 	sts	0x0064, r24
DDRB =__ddrb;
 112:	80 91 0b 01 	lds	r24, 0x010B
 116:	84 b9       	out	0x04, r24	; 4
DDRC =__ddrc;
 118:	80 91 08 01 	lds	r24, 0x0108
 11c:	87 b9       	out	0x07, r24	; 7
DDRD =__ddrd;
 11e:	80 91 06 01 	lds	r24, 0x0106
 122:	8a b9       	out	0x0a, r24	; 10
PORTB=__portb;
 124:	80 91 09 01 	lds	r24, 0x0109
 128:	85 b9       	out	0x05, r24	; 5
PORTC=__portc;
 12a:	80 91 05 01 	lds	r24, 0x0105
 12e:	88 b9       	out	0x08, r24	; 8
PORTD=__portd;
 130:	80 91 0a 01 	lds	r24, 0x010A
 134:	8b b9       	out	0x0b, r24	; 11
}
 136:	08 95       	ret

00000138 <__sleep_wdt>:

void __sleep_wdt(void){
sleep_enable();
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	83 bf       	out	0x33, r24	; 51
sleep_bod_disable();
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	80 66       	ori	r24, 0x60	; 96
 142:	85 bf       	out	0x35, r24	; 53
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	85 bf       	out	0x35, r24	; 53
sei();
 148:	78 94       	sei
sleep_cpu();
 14a:	88 95       	sleep
sleep_disable();
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	83 bf       	out	0x33, r24	; 51
}
 152:	08 95       	ret

00000154 <__vector_6>:

ISR(WDT_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
WDTCSR|=(1<<WDIE);
 16a:	e0 e6       	ldi	r30, 0x60	; 96
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
__wdt_ticks++;
 174:	80 91 00 01 	lds	r24, 0x0100
 178:	90 91 01 01 	lds	r25, 0x0101
 17c:	a0 91 02 01 	lds	r26, 0x0102
 180:	b0 91 03 01 	lds	r27, 0x0103
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	a1 1d       	adc	r26, r1
 188:	b1 1d       	adc	r27, r1
 18a:	80 93 00 01 	sts	0x0100, r24
 18e:	90 93 01 01 	sts	0x0101, r25
 192:	a0 93 02 01 	sts	0x0102, r26
 196:	b0 93 03 01 	sts	0x0103, r27
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <deep_sleep>:

void deep_sleep(uint32_t sleep_sec){
 1b0:	af 92       	push	r10
 1b2:	bf 92       	push	r11
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	5b 01       	movw	r10, r22
 1c2:	6c 01       	movw	r12, r24
if(__init_status==0){__WDT_sleep_init();__init_status=1;}
 1c4:	80 91 04 01 	lds	r24, 0x0104
 1c8:	88 23       	and	r24, r24
 1ca:	29 f4       	brne	.+10     	; 0x1d6 <deep_sleep+0x26>
 1cc:	0e 94 48 00 	call	0x90	; 0x90 <__WDT_sleep_init>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 04 01 	sts	0x0104, r24
turn_off_peripherals();
 1d6:	0e 94 5d 00 	call	0xba	; 0xba <turn_off_peripherals>
uint32_t current_ticks=__wdt_ticks;
 1da:	e0 90 00 01 	lds	r14, 0x0100
 1de:	f0 90 01 01 	lds	r15, 0x0101
 1e2:	00 91 02 01 	lds	r16, 0x0102
 1e6:	10 91 03 01 	lds	r17, 0x0103
while(__wdt_ticks<(sleep_sec+current_ticks)){__sleep_wdt();}
 1ea:	ea 0c       	add	r14, r10
 1ec:	fb 1c       	adc	r15, r11
 1ee:	0c 1d       	adc	r16, r12
 1f0:	1d 1d       	adc	r17, r13
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <deep_sleep+0x48>
 1f4:	0e 94 9c 00 	call	0x138	; 0x138 <__sleep_wdt>
 1f8:	80 91 00 01 	lds	r24, 0x0100
 1fc:	90 91 01 01 	lds	r25, 0x0101
 200:	a0 91 02 01 	lds	r26, 0x0102
 204:	b0 91 03 01 	lds	r27, 0x0103
 208:	8e 15       	cp	r24, r14
 20a:	9f 05       	cpc	r25, r15
 20c:	a0 07       	cpc	r26, r16
 20e:	b1 07       	cpc	r27, r17
 210:	88 f3       	brcs	.-30     	; 0x1f4 <deep_sleep+0x44>
peripherals_prev_state();
 212:	0e 94 85 00 	call	0x10a	; 0x10a <peripherals_prev_state>
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	af 90       	pop	r10
 226:	08 95       	ret

00000228 <main>:

#include "deep_sleep.h"
#include <util/delay.h>


int main(void){
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29

/*LED PIN PC5*/
DDRC|=(1<<5);
 22c:	3d 9a       	sbi	0x07, 5	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22e:	c8 ec       	ldi	r28, 0xC8	; 200
 230:	d0 e0       	ldi	r29, 0x00	; 0

while(1){
              
			  deep_sleep(10);  /*Sleep 10s*/
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <deep_sleep>
			  
			  PORTC|=(1<<5);   /*Turn on LED for 1s*/
 23e:	45 9a       	sbi	0x08, 5	; 8
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	97 e2       	ldi	r25, 0x27	; 39
 244:	fe 01       	movw	r30, r28
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24c:	d9 f7       	brne	.-10     	; 0x244 <main+0x1c>
 24e:	f1 cf       	rjmp	.-30     	; 0x232 <main+0xa>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
